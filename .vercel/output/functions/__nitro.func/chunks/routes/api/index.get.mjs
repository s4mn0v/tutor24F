import{PrismaClient as t}from"@prisma/client";import{d as o,b as r,c as s}from"../../nitro/nitro.mjs";import e from"jsonwebtoken";import"underscore";import"bluebird/js/release/promise";import"base64-js";import"jszip";import"@xmldom/xmldom";import"@xmldom/xmldom/lib/dom";import"xmlbuilder";import"dingbat-to-unicode";import"fs";import"url";import"os";import"path";import"path-is-absolute";import"pdf.js-extract";import"node:http";import"node:https";import"@vercel/kv";import"@iconify/utils";import"consola/core";const i=new t,a=o((async t=>{const o=r(t,"Authorization");if(!o||!o.startsWith("Bearer "))throw s({statusCode:401,statusMessage:"Acceso no autorizado"});const a=o.split(" ")[1];let n;try{n=e.verify(a,process.env.JWT_SECRET||"fallback_secret")}catch(t){if("TokenExpiredError"===t.name)throw s({statusCode:401,statusMessage:"Token expirado"});if("JsonWebTokenError"===t.name)throw s({statusCode:401,statusMessage:"Token inv√°lido"});throw s({statusCode:500,statusMessage:"Error interno del servidor"})}const m=n.userId;try{return await i.asignatura.findMany({where:{idDocente:m},include:{estudiantes:!0}})}catch(t){throw console.error("Error al obtener las asignaturas:",t),s({statusCode:500,statusMessage:"Error al obtener las asignaturas"})}}));export{a as default};
//# sourceMappingURL=index.get.mjs.map
