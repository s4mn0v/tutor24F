import{PrismaClient as o}from"@prisma/client";import{d as t,f as r,c as i,h as e}from"../../../nitro/nitro.mjs";import a from"jsonwebtoken";import"underscore";import"bluebird/js/release/promise";import"base64-js";import"jszip";import"@xmldom/xmldom";import"@xmldom/xmldom/lib/dom";import"xmlbuilder";import"dingbat-to-unicode";import"fs";import"url";import"os";import"path";import"path-is-absolute";import"pdf.js-extract";import"node:http";import"node:https";import"@vercel/kv";import"@iconify/utils";import"consola/core";const m=new o,s=t((async o=>{var t;try{const s=(null==(t=r(o).authorization)?void 0:t.split(" ")[1])||"";if(!s)throw i({statusCode:401,message:"Acceso no autorizado"});const n=a.verify(s,process.env.JWT_SECRET||"fallback_secret"),p=await m.material.findMany({where:{idAsignatura:n.asignaturaId,tipo:{in:["application/pdf","application/vnd.openxmlformats-officedocument.wordprocessingml.document","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet","application/vnd.openxmlformats-officedocument.presentationml.presentation"]}},select:{id:!0,nombre:!0,tipo:!0,creadoEn:!0,url:!0}});return await Promise.all(p.map((async o=>({...o,creadoEn:o.creadoEn.toISOString(),topics:await e(o.url,o.tipo)}))))}catch(o){throw console.error("Error:",o),i({statusCode:500,message:"Error al obtener materiales"})}}));export{s as default};
//# sourceMappingURL=materials.get.mjs.map
