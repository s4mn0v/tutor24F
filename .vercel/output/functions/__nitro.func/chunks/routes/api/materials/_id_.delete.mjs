import{d as r,c as o}from"../../../nitro/nitro.mjs";import{PrismaClient as e}from"@prisma/client";import{createClient as t}from"@supabase/supabase-js";import"underscore";import"bluebird/js/release/promise";import"base64-js";import"jszip";import"@xmldom/xmldom";import"@xmldom/xmldom/lib/dom";import"xmlbuilder";import"dingbat-to-unicode";import"fs";import"url";import"os";import"path";import"path-is-absolute";import"pdf.js-extract";import"node:http";import"node:https";import"@vercel/kv";import"@iconify/utils";import"consola/core";const s=t(process.env.SUPABASE_URL,process.env.SUPABASE_KEY),i=new e,a=r((async r=>{var e;const t=null==(e=r.context.params)?void 0:e.id;if(!t)throw o({statusCode:400,message:"Material ID is required."});const a=parseInt(t);if(isNaN(a))throw o({statusCode:400,message:"El ID del material no es v√°lido."});try{const r=await i.material.findUnique({where:{id:a}});if(!r)throw o({statusCode:404,message:"El material no existe."});const{error:e}=await s.storage.from("files").remove([r.url.split("/").pop()]);if(e)throw o({statusCode:500,message:"Error al eliminar el archivo de Supabase."});return await i.material.delete({where:{id:a}}),{success:!0}}catch(r){throw console.error(r),o({statusCode:500,message:"Error interno del servidor."})}}));export{a as default};
//# sourceMappingURL=_id_.delete.mjs.map
