import{PrismaClient as e}from"@prisma/client";import o from"bcryptjs";import{d as r,r as t,c as s}from"../../../nitro/nitro.mjs";import"mammoth";import"pdf.js-extract";import"node:http";import"node:https";import"@vercel/kv";import"@iconify/utils";import"consola/core";const a=new e,i=r((async e=>{const r=await t(e),{email:i,password:n,role:d,documentoIdentidad:m,nombre:c,telefono:u=""}=r;if(!(i&&n&&d&&m&&c))return s({statusCode:400,message:"Todos los campos son obligatorios excepto el teléfono."});if("ESTUDIANTE"===d)return s({statusCode:400,message:"No se permite el registro directo de estudiantes."});try{if(await a.usuario.findFirst({where:{OR:[{correo:i},{documentoIdentidad:m}]}}))return s({statusCode:400,message:"Ya existe un usuario con este correo o documento de identidad."});const e=await o.hash(n,10);return{message:"Usuario registrado exitosamente",userId:(await a.usuario.create({data:{correo:i,contrasena:e,rol:d,documentoIdentidad:m,nombre:c,telefono:u}})).id}}catch(e){return console.error("Error de registro:",e),e instanceof Error?s({statusCode:500,message:`Error interno del servidor: ${e.message}`}):s({statusCode:500,message:"Error interno del servidor: Ocurrió un error desconocido."})}finally{await a.$disconnect()}}));export{i as default};
//# sourceMappingURL=register.post.mjs.map
