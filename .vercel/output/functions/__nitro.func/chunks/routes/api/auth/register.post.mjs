import{PrismaClient as o}from"@prisma/client";import r from"bcryptjs";import{d as e,r as t,c as s}from"../../../nitro/nitro.mjs";import"underscore";import"bluebird/js/release/promise";import"base64-js";import"jszip";import"@xmldom/xmldom";import"@xmldom/xmldom/lib/dom";import"xmlbuilder";import"dingbat-to-unicode";import"fs";import"url";import"os";import"path";import"path-is-absolute";import"pdf.js-extract";import"node:http";import"node:https";import"@vercel/kv";import"@iconify/utils";import"consola/core";const i=new o,a=e((async o=>{const e=await t(o),{email:a,password:d,role:m,documentoIdentidad:n,nombre:c,telefono:p=""}=e;if(!(a&&d&&m&&n&&c))return s({statusCode:400,message:"Todos los campos son obligatorios excepto el teléfono."});if("ESTUDIANTE"===m)return s({statusCode:400,message:"No se permite el registro directo de estudiantes."});try{if(await i.usuario.findFirst({where:{OR:[{correo:a},{documentoIdentidad:n}]}}))return s({statusCode:400,message:"Ya existe un usuario con este correo o documento de identidad."});const o=await r.hash(d,10);return{message:"Usuario registrado exitosamente",userId:(await i.usuario.create({data:{correo:a,contrasena:o,rol:m,documentoIdentidad:n,nombre:c,telefono:p}})).id}}catch(o){return console.error("Error de registro:",o),o instanceof Error?s({statusCode:500,message:`Error interno del servidor: ${o.message}`}):s({statusCode:500,message:"Error interno del servidor: Ocurrió un error desconocido."})}finally{await i.$disconnect()}}));export{a as default};
//# sourceMappingURL=register.post.mjs.map
